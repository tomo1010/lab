       <!-- Alpine.js ロジック -->
        <script>
            function taxCalculator() {
                // Cookie保存用KEY
                const ROW_COOKIE_KEY = 'labor_rows_json';
                const MODE_COOKIE_KEY = 'laborTaxMode';

                return {
                    taxMode: 'including',
                    grossA: null,
                    grossB: null,

                    item1: {
                        cost: null,
                        quantity: 1
                    },
                    item2: {
                        cost: null,
                        quantity: 1
                    },
                    item3: {
                        cost: null,
                        quantity: 1
                    },

                    laborTaxMode: 'excluding',

                    laborItems: [{
                            name: '組替えバランス',
                            price: null,
                            quantity: 4
                        },
                        {
                            name: '脱着',
                            price: null,
                            quantity: 4
                        },
                        {
                            name: '廃棄タイヤ',
                            price: null,
                            quantity: 4
                        },
                        {
                            name: 'バルブ',
                            price: null,
                            quantity: 4
                        },
                        {
                            name: 'ナット',
                            price: null,
                            quantity: 4
                        },
                    ],

                    // 工賃設定保存フラグ
                    saveLaborToCookie: false,
                    // 初期化フック
                    init() {
                        // initを1度しか実行しないようにする
                        if (window.__taxCalcBooted) return;
                        window.__taxCalcBooted = true;

                        // 保存チェック初期値反映
                        const chk = document.getElementById('save_labor_to_cookie');
                        if (chk) {
                            this.saveLaborToCookie = !!getCookie('save_labor_to_cookie');
                            chk.checked = this.saveLaborToCookie; // checked (true/false)を設定

                            // リスナー重複防止
                            if (!chk.dataset.laborBound) {
                                // 保存チェック変更時
                                chk.addEventListener('change', () => {
                                    this.saveLaborToCookie = chk.checked;
                                    if (this.saveLaborToCookie) {
                                        setCookie('save_labor_to_cookie', true, 30);
                                        this.$nextTick(() => { // Alpineが直前の入力を反映し終わってから保存
                                            // 明細保存
                                            this.saveLaborRows();
                                            // radio保存
                                            setCookie(MODE_COOKIE_KEY, this.laborTaxMode, 30);
                                            alert('工賃設定をクッキーに保存しました。');
                                        });
                                    } else {
                                        // 工賃設定周り削除
                                        deleteCookie('save_labor_to_cookie');
                                        deleteCookie(ROW_COOKIE_KEY);
                                        deleteCookie(MODE_COOKIE_KEY);
                                        alert('クッキーから工賃設定を削除しました。');
                                    }
                                });
                                // 重複防止用
                                chk.dataset.laborBound = '1';
                            }
                        }

                        // radio初期値反映
                        const mode = getCookie(MODE_COOKIE_KEY);
                        if (mode) this.laborTaxMode = mode;

                        // 明細初期値反映（Cookieから整形してlaborItemsに代入）
                        const rowsStr = getCookie(ROW_COOKIE_KEY);
                        if (rowsStr) {
                            try {
                                const parsed = JSON.parse(rowsStr);
                                if (Array.isArray(parsed)) {
                                    this.laborItems = parsed.slice(0, 10).map(r => ({
                                        name: r?.name ?? '',
                                        price: r?.price === '' || r?.price == null ? null : Number(r.price),
                                        quantity: r?.quantity === '' || r?.quantity == null ? 1 : Number(r.quantity),
                                    }));
                                }
                            } catch {}
                        }

                        // 変更監視 (保存チェックONの場合のみ)
                        this.$watch(() => JSON.stringify(this.laborItems), () => {
                            if (this.saveLaborToCookie) this.saveLaborRows();
                        });
                        this.$watch('laborTaxMode', (v) => {
                            if (this.saveLaborToCookie) setCookie(MODE_COOKIE_KEY, v, 30);
                        });
                    },
                    /**
                     * 明細をCookieに保存する
                     */
                    saveLaborRows() {
                        const rows = this.laborItems
                            .filter(r => `${(r.name??'')}${(r.price??'')}${(r.quantity??'')}`.trim() !== '')
                            .map(r => ({
                                name: r.name ?? '',
                                price: r.price === '' || r.price == null ? null : Number(r.price),
                                quantity: r.quantity === '' || r.quantity == null ? 1 : Number(r.quantity),
                            }));
                        // 配列をjson文字列に変換してCookie保存
                        setCookie(ROW_COOKIE_KEY, JSON.stringify(rows), 30);
                    },


                    addLaborItem() {
                        if (this.laborItems.length < 10) {
                            this.laborItems.push({
                                name: '',
                                price: 0,
                                quantity: 1
                            });
                        } else {
                            alert('明細は最大10件までです');
                        }
                    },


                    //get laborSubtotal() {
                    //    const subtotal = this.laborItems.reduce((sum, item) => {
                    //        const price = Number(item.price) || 0;
                    //        const quantity = Number(item.quantity) || 0;
                    //        return sum + (price * quantity);
                    //    }, 0);
                    //    return this.laborTaxMode === 'including' ? subtotal : Math.round(subtotal * 1.1);
                    //},

                    get laborSubtotal() {
                        const subtotal = this.laborItems.reduce((sum, item) => {
                            const price = Number(item.price) || 0;
                            const quantity = Number(item.quantity) || 0;
                            return sum + (price * quantity);
                        }, 0);

                        return this.laborTaxMode === 'including' ?
                            subtotal :
                            Math.round(subtotal * 1.1); // ← ここで税込に換算
                    },

                    get laborSubtotalExcludingTax() {
                        const subtotal = this.laborItems.reduce((sum, item) => {
                            const price = Number(item.price) || 0;
                            const quantity = Number(item.quantity) || 0;
                            return sum + (price * quantity);
                        }, 0);

                        return this.laborTaxMode === 'including' ?
                            Math.round(subtotal / 1.1) // 税込→税抜
                            :
                            subtotal; // そのまま税抜
                    },



                    applyGrossMargin(cost) {
                        const add = parseFloat(this.grossA);
                        const mul = parseFloat(this.grossB);
                        const safeAdd = isNaN(add) ? 0 : add;
                        const safeMul = isNaN(mul) ? 1 : mul;
                        return Math.round((cost + safeAdd) * safeMul);
                    },

                    displayUnitPrice(item) {
                        const cost = Number(item.cost) || 0;
                        const quantity = Number(item.quantity) || 0;
                        const base = cost * quantity;

                        const add = parseFloat(this.grossA);
                        const mul = parseFloat(this.grossB);
                        const safeAdd = !isNaN(add) ? add : 0;
                        const safeMul = !isNaN(mul) ? mul : 1;

                        const priceWithProfit = (base + safeAdd) * safeMul;
                        return this.taxMode === 'including' ? Math.round(priceWithProfit) : Math.round(priceWithProfit * 1.1);
                    },

                    getProfitAmount(item) {
                        const cost = Number(item.cost) || 0;
                        const quantity = Number(item.quantity) || 0;
                        const base = cost * quantity;

                        const add = parseFloat(this.grossA);
                        const mul = parseFloat(this.grossB);
                        const safeAdd = !isNaN(add) ? add : 0;
                        const safeMul = !isNaN(mul) ? mul : 1;

                        const finalPrice = (base + safeAdd) * safeMul;
                        return Math.round(finalPrice - base);
                    },

                    totalPrice(item) {
                        return this.displayUnitPrice(item) * item.quantity;
                    },

                    totalWithLabor(item) {
                        return this.displayUnitPrice(item) + this.laborSubtotal;
                    },

                    // クリップボードにコピーする関数
                    async copyToClipboard() {

                        let output = '';

                        const customer_name = document.getElementById('customer_name')?.value || '';
                        const honorific = document.getElementById('honorific')?.value || '';
                        output += `■ 宛名\n${customer_name} ${honorific}\n\n`;

                        const selectTire = document.getElementById('selectTire')?.value || '未選択';
                        output += `■ タイトル\n${selectTire}\n\n`;

                        const sizeGeneral = document.getElementById('sizeGeneral')?.value;
                        const sizeFree = document.getElementById('sizeFree')?.value;
                        output += `■ タイヤサイズ\n${sizeFree || sizeGeneral || '未入力'}\n\n`;

                        const maker1 = document.getElementById('maker1')?.value || '未選択';
                        const maker2 = document.getElementById('maker2')?.value || '未選択';
                        const maker3 = document.getElementById('maker3')?.value || '未選択';

                        output += `■ 商品1：${maker1}\n合計：${this.totalWithLabor(this.item1)} 円\n\n`;
                        output += `■ 商品2：${maker2}\n合計：${this.totalWithLabor(this.item2)} 円\n\n`;
                        output += `■ 商品3：${maker3}\n合計：${this.totalWithLabor(this.item3)} 円\n\n`;

                        output += `■ 工賃明細\n小計：${this.laborSubtotal} 円\n\n`;

                        const comment = document.getElementById('comment')?.value || '';
                        output += `■ コメント\n${comment.trim()}\n`;

                        try {
                            await navigator.clipboard.writeText(output);
                            alert('入力内容をクリップボードにコピーしました！');
                        } catch (e) {
                            alert('コピーに失敗しました');
                        }
                    }
                };


            }
        </script>